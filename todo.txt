[DONE]
   // Main features
 - Можно зарегистрироваться и логинится.
 - Наверху показано под каким логином ты зашел.
 - Тесты и ответы на них создаются динамически через админку.
 - Список тестов выводится в виде содержания произвольного вида (столбец, таблица, как удобно)
 - За прохождение тестов начисляется какое-то количества валюты.
 - Валюту можно потратить на перекрашивание рамки логина или бэкграунда на странице профиля.
 - Показывать список пользователей и количество пройденных тестов на отдельной странице, там же показывать цветовую дифференциацию пользователей.

   // Other
 - Написать readme (+подробный туториал)
 - Выложить на GitHub
 - Протестировать старт проекта (с описания readme)
 - Проверить скрипты запуска проекта
 - Переделать view покупки цвета на класс (post/get)
 - Сделать возможность просмотра пройденных тестов (временный вариант)
 - Вынести цвета в отдельное приложение shop


[IN PROGRESS / 1st LINE]
 - Перенести пользовательские результаты в приложение users
 - Вынести неуниверсальные данные пользователя в модель Profile (OneToOne User)?
 - Модель для статистики пользователей неэффективная, надо переделать.
 - Назначить значения по умолчанию для полей моделей
 - Баг: если пользователь не дал ни одного ответа, но нажал submit, то квиз не будет считаться пройденным, т.к. ни одного ответа не сохраниться в БД.
 - Добавить paginator для QuizListView, UserListView, ColorListView(?)
 - Сделать генератор тестов (математика) для тестирования приложения (json?)
 - Дополнить тестовую базу данных
 - Отредактировать админку для удобного редактирования тестов и пр.
 - Переделать обработку post-запроса для квиза
 - Исправить сортировку пользователей. Поле, по которому происходит сортировка, вычисляемое.
 - Проверить свойства полей для моделей
 - Написать тесты
 - Составить (и пересмотреть) карту маршрутизации, добавить её в readme
 - Перевести readme на английский язык
 - Добавить возможность смены пароля
 - Исправить фронт (*.css)
 - Переделать фронт: цветовая рамка пользователя, кнопки в правом верхнем углу (логин и пр.), страница профиля, страница покупки цветов и др.
 - Сделать статистику пройденных пользователем тестов (перенести в БД)
 - Пересмотреть реализацию (модели) статистики прохождения тестов (сделать отдельную таблицу?)
 - Страницу пользователя (profile) сделать доступной по имени пользователя в url. Добавить пользователям возможность просматривать чужие профили со статистикой
 - В магазине цветов кнопка "купить" рядом с каждым цветом. Вместо этого можно поставить чекбоксы для выбора и одну кнопку для покупки. Добавить автоматический счётчик сыммы в корзине. Сделать по аналогии с магазином.
 - Проверить на Ubuntu
 - Деплой
 - Сделать возможность добавлять тесты пользователями?
 - Импорт с JSON
 - Категории (теги) тестов
 - Поиск теста по тексту
 - Добавить лого html, css в readme


[IN LINE]
 - Сделать фронт на реакте, в виде SPA или отдельных модулей.
 - Будет здорово в любом случае: если будет готовая ДБ с приложеными тестовыми данными и учетными записями, которые можно было бы свободно дополнить.
 - Выкатить на github, деплой не обязательно, проверим под режимом разработчика.



[DRAFT]

Статистика пользовательских результатов
 Общее
  Количество пройденных квизов
  Список пройденных квизов
  Количество баллов
  Количество вопросов/правильных ответов
 Для отдельного квиза
  Количество баллов
  Количество вопросов
  Количество ответов и правильных ответов


UserAnswer(Results?Statistic?)
 user
 question*
 answer
 (quiz?)
 (is_correct?)
 (points)
* вопрос можно получить из ответа, а поле question убрать из таблицы и добывить к пользователю поле answers (ManyToMany), как это было реализовано изначально. В таком случае, если пользователь пропустит все вопросы в квизе и отправит ответ, то этот квиз не будет считаться пройденным, т.к. не будет сохранено ни одного ответа в базу данных. Такое поведение гипотетически может считаться в какой-то степени разумным, т.к. странно отправлять на проверку квиз без единого ответа. Но в таком случае нужно хотя бы выдать сообщение.



Архитектура проекта
app
 model
  field

 users
  User
   profile = OneToOne(Profile)
 profiles
  Profile
   user = OneToOne(User)
   QuizStatistics
   Bag
    item = Product
 quizzes
  Quiz
  Question
  Answer
  CorrectAnswer
 shop
  Product/Item
  




-------------------------------------------------


Создать сервис прохождения опросов пользователями на Django.

Обязательная часть:

    1. Можно зарегистрироваться и логинится. Наверху показано под каким логином ты зашел.
    2. Тесты и ответы на них создаются динамически через админку.
    3. Список тестов выводится в виде содержания произвольного вида (столбец, таблица, как удобно)

Фронт делается с помощью шаблонизатора Django, СУБД произвольная, но в идеале sqlite

Опция 1.

    1. За прохождение тестов начисляется какое-то количества валюты.
    2. Валюту можно потратить на перекрашивание рамки логина или бэкграунда на странице профиля.
    3. Показывать список пользователей и количество пройденных тестов на отдельной странице, там же показывать цветовую дифференциацию пользователей. 

Опция 2.

    1. Сделать фронт на реакте, в виде SPA или отдельных модулей.

Будет здорово в любом случае: если будет готовая ДБ с приложеными тестовыми данными и учетными записями, которые можно было бы свободно дополнить.


Выкатить на github, деплой не обязательно, проверим под режимом разработчика.
