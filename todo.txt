[DONE]
   // Main features
 - Можно зарегистрироваться и логинится.
 - Наверху показано под каким логином ты зашел.
 - Тесты и ответы на них создаются динамически через админку.
 - Список тестов выводится в виде содержания произвольного вида (столбец, таблица, как удобно)
 - За прохождение тестов начисляется какое-то количества валюты.
 - Валюту можно потратить на перекрашивание рамки логина или бэкграунда на странице профиля.
 - Показывать список пользователей и количество пройденных тестов на отдельной странице, там же показывать цветовую дифференциацию пользователей.

   // Other
 - Написать readme (+подробный туториал)
 - Выложить на GitHub
 - Протестировать старт проекта (с описания readme)
 - Проверить скрипты запуска проекта
 - Переделать view покупки цвета на класс (post/get)
 - Сделать возмодность просмотра пройденных тестов (временный вариант)


[IN PROGRESS / 1st LINE]
 - Исправить сортировку пользователей. Поле, по которому происходит сортировка вычисляемое.
 - Отредактировать админку для удобного редактирования тестов и пр.
 - Проверить свойства полей для моделей
 - Добавить paginator для QuizListView, UserListView, ColorListView(?)
 - Написать тесты
 - Составить (и пересмотреть) карту маршрутизации, добавить её в readme
 - Добавить возможность смены пароля
 - Исправить фронт (*.css)
 - Переделать фронт: цветовая рамка пользователя, кнопки в правом верхнем углу (логин и пр.), страница профиля, страница покупки цветов и др.
 - Сделать статистику пройденных пользователем тестов (перенести в БД)
 - Пересмотреть реализацию (модели) статистики прохождения тестов (сделать отдельную таблицу?)
 - Дополнить тестовую базу данных
 - Разбиение на приложения сомнительное
 - Цвета находятся в приложении users. Сомнительно.
 - Пользовательские результаты находятся в quizzers. Сомнительно. 
 - Баг: если я не дал ни одного ответа, но нажал submit, то квиз не будет считаться пройденным, т.к. ни одного моего ответа не сохраниться в БД.
 - В магазине цветов кнопка "купить" рядом с каждым цветом. Вместо этого можно поставить чекбоксы для выбора и одну кнопку для покупки. Добавить автоматический счётчик сыммы в корзине.
 - Проверить на Ubuntu
 - Деплой


[IN LINE]
 - Сделать фронт на реакте, в виде SPA или отдельных модулей.
 - Будет здорово в любом случае: если будет готовая ДБ с приложеными тестовыми данными и учетными записями, которые можно было бы свободно дополнить.
 - Выкатить на github, деплой не обязательно, проверим под режимом разработчика.



-------------------------------------------------


Создать сервис прохождения опросов пользователями на Django.

Обязательная часть:

    1. Можно зарегистрироваться и логинится. Наверху показано под каким логином ты зашел.
    2. Тесты и ответы на них создаются динамически через админку.
    3. Список тестов выводится в виде содержания произвольного вида (столбец, таблица, как удобно)

Фронт делается с помощью шаблонизатора Django, СУБД произвольная, но в идеале sqlite

Опция 1.

    1. За прохождение тестов начисляется какое-то количества валюты.
    2. Валюту можно потратить на перекрашивание рамки логина или бэкграунда на странице профиля.
    3. Показывать список пользователей и количество пройденных тестов на отдельной странице, там же показывать цветовую дифференциацию пользователей. 

Опция 2.

    1. Сделать фронт на реакте, в виде SPA или отдельных модулей.

Будет здорово в любом случае: если будет готовая ДБ с приложеными тестовыми данными и учетными записями, которые можно было бы свободно дополнить.


Выкатить на github, деплой не обязательно, проверим под режимом разработчика.
